snippet license "license" b
/**
 * Copyright 2015-present ${1}. All rights reserved.
 * Licensed under the terms of the MIT license.
 */
endsnippet

#
# Flow
#

snippet flow "flow" b
/**
 * @flow
 */

'use strict';

${1:`!p snip.rv = snip.basename or 'ModuleName'`}$0

module.exports = $1;
endsnippet

snippet pretty "pretty-print JSON-able data" b
console.log(
  JSON.stringify({
    $1
  }, null, 2)
);
endsnippet

#
# React
#

global !p
"""
Checks the current buffer to see whether React ES6 syntax should be used.
"""
def react_es6():
	buffer = vim.current.buffer
	for line in buffer:
		if re.search('React.createClass', line):
			return False;
	return True;
endglobal


snippet cc "createClass" b
const ${1:`!p snip.rv = re.sub('\.react$', '', snip.basename or 'ModuleName')`} = React.createClass({
	render: function() {
		$0
	}
});

module.exports = $1;
endsnippet

snippet cdm "componentDidMount" b
componentDidMount`!p snip.rv = '' if react_es6() else ': function'`() {
	$0
}`!p snip.rv = '' if react_es6() else ','`
endsnippet

snippet cdu "componentDidUpdate" b
componentDidUpdate`!p snip.rv = '' if react_es6() else ': function'`(prevProps, prevState) {
	$0
}`!p snip.rv = '' if react_es6() else ','`
endsnippet

snippet cwm "componentWillMount" b
componentWillMount`!p snip.rv = '' if react_es6() else ': function'`() {
	$0
}`!p snip.rv = '' if react_es6() else ','`
endsnippet

snippet cwrp "componentWillReceiveProps" b
componentWillReceiveProps`!p snip.rv = '' if react_es6() else ': function'`(nextProps) {
	$0
}`!p snip.rv = '' if react_es6() else ','`
endsnippet

snippet cwum "componentWillUnmount" b
componentWillUnmount`!p snip.rv = '' if react_es6() else ': function'`() {
	$0
}`!p snip.rv = '' if react_es6() else ','`
endsnippet

snippet cwu "componentWillUpdate" b
componentWillUpdate`!p snip.rv = '' if react_es6() else ': function'`(nextProps, nextState) {
	$0
}`!p snip.rv = '' if react_es6() else ','`
endsnippet

snippet gdp "getDefaultProps" b
getDefaultProps: function() {
	return {
		$0
	};
},
endsnippet

snippet gis "getInitialState" b
getInitialState: function() {
	return {
		$0
	};
},
endsnippet

snippet scu "shouldComponentUpdate" b
shouldComponentUpdate`!p snip.rv = '' if react_es6() else ': function'`(nextProps, nextState) {
	return ${1:true};
}`!p snip.rv = '' if react_es6() else ','`
endsnippet

#
# console methods
#

snippet dir "console.dir"
console.dir(${1});
endsnippet

snippet log "console.log"
console.log(${1});
endsnippet

snippet time "console.time"
console.time('${1}');
endsnippet

snippet end "console.timeEnd"
console.timeEnd('${1}');
endsnippet

#
# other
#

snippet ** "docblock" b
/**
${VISUAL:/((?m)^)/ * /g}$0
 */
endsnippet

snippet "func?" "function" !r
function${1: name}(${2:arg}) {
	$0
}
endsnippet

snippet pm "@providesModule declaration" b
/**
 * @providesModule ${1:`!p snip.rv = snip.basename or 'ModuleName'`}
 */

${3:'use strict';

}$0
endsnippet

snippet "imp(ort)?" "import" !br
import ${1:Module} from '${2}$1${3}';
endsnippet

snippet "req(u|ui|uir|uire)?" "require" !br
const ${1:ModuleName} = require('${2}$1${3}');
endsnippet

snippet "(use|strict)" "'use strict' declaration" br
'use strict';
endsnippet

##Angular

## Global Snippets
# Define a new Angular Controller;
# You can change the controller name and parameters
snippet ngc "Controller Name"
var ${1:controllerName} = function(${2:scope}, ${3:injectables}) {
	${4}
};
endsnippet
# angular.foreach loop
snippet ngfor
angular.forEach(${1:iterateOver}, function(value, key) {
	${2}
});
endsnippet
## Module Based Snippets
# A new angular module without a config function
snippet ngm
angular.module('${1:moduleName}', [${2:moduleDependencies}]);
${3}
endsnippet
# A new angular module without a config function and a variable assignment
snippet ngma
var ${1:moduleName} = angular.module('$1', [${2:moduleDeps}]);
${3}
endsnippet
# A new angular module with a config function
snippet ngmc
var ${1:moduleName} = angular.module('$1', [${2:moduleDeps}], function(${3:configDeps}) {
	${4}
});
endsnippet
# A factory in a module
snippet ngmfa
factory('${1:factoryName}', function(${2:dependencies}) {
	${3}
});
endsnippet
# Define an Angular Module Service to be attached to a previously defined module
# You can change the service name and service injectables
snippet ngms
service('${1:serviceName}', function(${2:injectables}) {
	${3}
});
endsnippet
# Define an Angular Module Filter to be attached to a previously defined module
# You can change the filter name
snippet ngmfi
filter('${1:filterName}', function(${2:injectables}) {
	return function(input, ${3:args}) {
		${4}
	};
});
endsnippet
## Route Based Snippets
# Defines a when condition of an AngularJS route
snippet ngrw
$routeProvider.when('${1:url}', {
	templateUrl: '${2:templateUrl}',
	controller: '${3:controller}'
});
${4}
endsnippet
# Defines a when condition of an AngularJS route with the resolve block
snippet ngrwr
$routeProvider.when('${1:url}', {
	templateUrl: '${2:templateUrl}',
	controller: '${3:controller}',
	resolve: {
		${4}
	}
});
${5}
endsnippet

# Defines an otherwise condition of an AngularJS route
snippet ngro
$routeProvider.otherwise({
	redirectTo: '${1:url}'
});
${2}
endsnippet
## Scope Related Snippets
# Define a new $scope'd function (usually inside an AngularJS Controller)
# You can change the function name and arguments
snippet $f
$scope.${1:functionName} = function(${2:args}) {
	${3}
};
endsnippet

# Defines a new $scope'd variable inside an AngularJS controller
snippet $v
$scope.${1:variable} = ${2:value};
${3}
endsnippet 
# Defines a new $scope'd variable inside an AngularJS controller and assigns a value from a constructor arguments
snippet $va
$scope.${1:variable} = ${2:variable};
${3}
endsnippet 
# Define a $watch for an expression
# You can change the expression to be watched
snippet $w
$scope.$watch('${1:watchExpr}', function(newValue, oldValue) {
	${2}
});
endsnippet 
# Define a $on for a $broadcast/$emit on the $scope inside an Angular Controller
# You can change the event name to listen on
snippet $on
$scope.$on('${1:eventName}', function(event, ${2:args}) {
	${3}
});
endsnippet
# Define a $broadcast for a $scope inside an Angular Controller / Angular Controller Function
# You can change the event name and optional event arguments
snippet $b
$scope.$broadcast('${1:eventName}', ${2:eventArgs});
${3}
endsnippet
# Define an $emit for a $scope inside an Angular Controller / Angular Controller Function
# You can change the event name and optional event arguments
snippet $e
$scope.$emit('${1:eventName}', ${2:eventArgs});
${3}
endsnippet
## Directive related snippets
# A compile function
snippet ngdcf
function compile(tElement, tAttrs, transclude) {
	return function(scope, element, attrs) {
		${1}
	}
}
endsnippet
# A linking function in a directive
snippet ngdlf
function(scope, element, attrs${1:ctrl}) {
	${2}
}
endsnippet
# A directive with a compile function
snippet ngdc
directive('${1:directiveName}', function factory(${2:injectables}) {
	var directiveDefinitionObject = {
		${3:directiveAttrs},
		compile: function compile(tElement, tAttrs, transclude) {
			return function (scope, element, attrs) {
			
			}
		}
	};
	return directiveDefinitionObject;
});
endsnippet
# A directive with a linking function only
snippet ngdl
.directive('${1:directiveName}', function(${2:directiveDeps}) {
	return function(scope, element, attrs${3:ctrl}) {
		${4}
	}
});
endsnippet 